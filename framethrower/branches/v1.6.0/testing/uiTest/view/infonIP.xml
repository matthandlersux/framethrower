<f:template name="testTemplate"
	xmlns:f="http://www.worldmerge.com/2008/xsl"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:html="http://www.w3.org/1999/xhtml"
	xmlns:svg="http://www.w3.org/2000/svg">
	
	<f:param name="focus" type="UI.consIP" />
	<f:param name="expectedType" type="Object" />

	<f:derive name="object" d="UI.consIP:object focus" />
	<f:derive name="left" d="UI.consIP:left focus" />
	<f:derive name="right" d="UI.consIP:right focus" />
	<!-- <f:derive name="asConsIP" d="UI.objectIP~UI.consIP focus" /> -->
	
	<f:derive name="infonType" d="shared.type.infon" />
	<f:derive name="typeDisplay" d="UI.prefs:typeDisplay ui.prefs" />
	<f:derive name="typeName" d="getName expectedType" />

	
	<xsl:variable name="expectInfon" select="$expectedType/@name = $infonType/@name" />
	<xsl:variable name="empty" select="not($object) and not($left)" />
	
	<xsl:choose>
		<xsl:when test="$expectInfon">
			<html:div>
				<f:on event="click" with-action="$showRelationPopup">
					<f:with-param-browser name="x" prop="mouseX" />
					<f:with-param-browser name="y" prop="mouseY" />
				</f:on>
				<xsl:choose>
					<xsl:when test="$empty">
						<html:div class="infon"><html:div class="infonCell">
							[Select Relation]
						</html:div></html:div>
					</xsl:when>
					<xsl:otherwise>
						<f:thunk with-template="$printCons" />
					</xsl:otherwise>
				</xsl:choose>
			</html:div>
		</xsl:when>
		<xsl:otherwise>
			<html:div>
				<f:on event="click" with-action="$showObjectPopup">
					<f:with-param-browser name="x" prop="mouseX" />
					<f:with-param-browser name="y" prop="mouseY" />
				</f:on>
				<xsl:choose>
					<xsl:when test="$empty">
						<xsl:variable name="color" select="$typeDisplay/f:entry[f:key/f:o/@name = $expectedType/@name][1]/f:value/f:literal/@value" />
						<html:div class="objectDrop">
							<xsl:attribute name="style">
								border-color: <xsl:value-of select="$color" />;
								color: <xsl:value-of select="$color" />;
							</xsl:attribute>
							<xsl:value-of select="$typeName/*/@value" />
							<!-- <xsl:value-of select="$focus/@name" /> -->
						</html:div>
					</xsl:when>
					<xsl:when test="$object">
						<f:thunk url="objectNoClick.xml">
							<f:with-param name="focus" select="$object" />
						</f:thunk>
					</xsl:when>
					<xsl:when test="$left and $right">
						<f:thunk with-template="$printCons" />
					</xsl:when>
				</xsl:choose>
			</html:div>
		</xsl:otherwise>
	</xsl:choose>
	
	<f:include url="/xml/util/uiActions.xml" />
	
	<f:template name="wrapInContext">
		<html:div>
			<f:on event="click" with-action="$wrap" />
			[Wrap in context]
		</html:div>
		<f:action name="wrap">
			<f:derive name="sharedIn" d="shared.in" />
			<f:create type="UI.consIP" name="temp" />
			<xsl:if test="$object">
				<f:intact object="$temp" action="add" property="object" key="$object" />
			</xsl:if>
			<xsl:if test="$left and $right">
				<f:intact object="$temp" action="add" property="left" key="$left" />
				<f:intact object="$temp" action="add" property="right" key="$right" />
			</xsl:if>
			
			<f:create type="UI.consIP" name="in" />
			<f:intact object="$in" action="add" property="object" key="$sharedIn" />
			
			<f:create type="UI.consIP" name="sit" />
			<f:create type="UI.consIP" name="cons" />
			<f:intact object="$cons" action="add" property="left" key="$in" />
			<f:intact object="$cons" action="add" property="right" key="$sit" />
			
			<f:intact object="$focus" action="add" property="left" key="$cons" />
			<f:intact object="$focus" action="add" property="right" key="$temp" />
			<f:intact object="$focus" action="remove" property="object" />
			
			<f:perform with-action="$hidePopup" />
		</f:action>
	</f:template>
	
	
	
	<f:template name="relationPopup">
		<f:derive name="relations" d="filterRelations (getObjectsIn shared.ont)" />
		
		<f:thunk with-template="$wrapInContext" />
		
		<xsl:for-each select="$relations/*">
			<html:div>
				<f:on event="click" with-action="$selectRelation">
					<f:with-param name="relation" select="." />
				</f:on>
				
				<f:thunk url="objectNoClick.xml">
					<f:with-param name="focus" select="." />
				</f:thunk>
			</html:div>
			<f:thunk with-template="$selectRelation">
				<f:with-param name="relation" select="." />
			</f:thunk>
		</xsl:for-each>
		<f:action name="selectRelation">
			<f:param name="relation" type="Object" />
			<f:derive name="argCount" d="(mapSet (compose (compose length keys) getRelationTypeComponents)) (bindUnitSet Object~Cons (getTypes relation))" />
			
			<!-- <xsl:value-of select="$argCount/*[1]/@value" /> -->
			
			<f:create name="left" type="UI.consIP" />
			<f:intact object="$left" action="add" property="object" key="$relation" />
			
			<xsl:call-template name="makeConsIP">
				<xsl:with-param name="num" select="$argCount/*[1]/@value - 1" />
				<xsl:with-param name="left" select="$left" />
			</xsl:call-template>
			
			<f:intact action="add" property="left" object="$focus">
				<f:with-param name="key"><f:var name="c1" /></f:with-param>
			</f:intact>
			
			<f:create type="UI.consIP" name="o0" />
			<f:intact action="add" property="right" object="$focus" key="$o0" />
				
			<f:perform with-action="$hidePopup" />
			
			<xsl:template name="makeConsIP">
				<xsl:param name="num" />
				<xsl:param name="left" />
				
				<f:create type="UI.consIP" name="o{$num}" />
				<f:create type="UI.consIP" name="c{$num}" />
				
				<f:intact action="add" property="left" key="$left">
					<f:with-param name="object"><f:var name="c{$num}" /></f:with-param>
				</f:intact>
				<f:intact action="add" property="right">
					<f:with-param name="object"><f:var name="c{$num}" /></f:with-param>
					<f:with-param name="key"><f:var name="o{$num}" /></f:with-param>
				</f:intact>
				
				<xsl:if test="$num &gt; 1">
					<xsl:call-template name="makeConsIP">
						<xsl:with-param name="num" select="$num - 1" />
						<xsl:with-param name="left">
							<f:var name="c{$num}" />
						</xsl:with-param>
					</xsl:call-template>
				</xsl:if>
			</xsl:template>
			
			
		</f:action>
	</f:template>
	<f:action name="showRelationPopup">
		<f:param name="x" type="Number" />
		<f:param name="y" type="Number" />
		
		<f:perform with-action="$showPopup">
			<f:with-param name="x" select="$x" />
			<f:with-param name="y" select="$y" />
			<f:with-param name="width" select="300" as="Number" />
			<f:with-param name="height" select="300" as="Number" />
			<f:with-param name="content" select="$relationPopup" />
		</f:perform>
	</f:action>
	
	<f:template name="objectPopup">
		<f:derive name="objects" d="getObjectsOfType expectedType" />
		
		<f:thunk with-template="$wrapInContext" />
		
		<xsl:for-each select="$objects/*">
			<html:div>
				<f:on event="click" with-action="$selectObject">
					<f:with-param name="object" select="." />
				</f:on>
				<f:thunk url="objectNoClick.xml">
					<f:with-param name="focus" select="." />
				</f:thunk>
			</html:div>
		</xsl:for-each>
		<f:action name="selectObject">
			<f:param name="object" type="Object" />
			
			<f:intact action="add" property="object" object="$focus" key="$object" />
				
			<f:perform with-action="$hidePopup" />
		</f:action>
	</f:template>
	<f:action name="showObjectPopup">
		<f:param name="x" type="Number" />
		<f:param name="y" type="Number" />
		
		<f:perform with-action="$showPopup">
			<f:with-param name="x" select="$x" />
			<f:with-param name="y" select="$y" />
			<f:with-param name="width" select="300" as="Number" />
			<f:with-param name="height" select="300" as="Number" />
			<f:with-param name="content" select="$objectPopup" />
		</f:perform>
	</f:action>
	

	
	

	







	<f:template name="printCons">
		<f:derive name="infonArgs" d="getInfonIPArguments focus" />
		<f:derive name="template" d="(compose (bindSet getRelationTemplate) (bindUnitSet UI.consIP:object)) (getInfonIPRelations focus)" />
		
		<f:derive name="rtInputs" d="mapSet getRelationTypeInputs (bindUnitSet Object~Cons (bindSet getTypes (bindUnitSet UI.consIP:object (getInfonIPRelations focus))))" />
		
		<f:derive name="polyA" d="shared.type.poly.a" />
		
		
		<!-- <html:div>Cons In Progress</html:div> -->
		
		<xsl:variable name="rt" select="$template/f:literal/f:relationTemplate" />
		<xsl:if test="$rt">
			<html:span>
				<xsl:call-template name="print">
					<xsl:with-param name="relationTemplate" select="$rt" />
					<xsl:with-param name="infonArgs" select="$infonArgs" />
					<xsl:with-param name="argTemplate" select="$printArg" />
				</xsl:call-template>
			</html:span>
		</xsl:if>
		
		<f:template name="printArg">
			<f:param name="focus" type="UI.consIP" />
			<f:param name="num" type="Number" />
			
			<xsl:variable name="type">
				<xsl:variable name="t" select="$rtInputs/f:map[1]/f:entry[position() = $num/@value]/f:value/*" />
				<xsl:choose>
					<xsl:when test="$t/@name = $polyA/@name">
						<xsl:copy-of select="$expectedType" />
					</xsl:when>
					<xsl:otherwise>
						<xsl:copy-of select="$t" />
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			
			
			<f:thunk url="infonIP.xml">
				<f:with-param name="focus" select="$focus" />
				<f:with-param name="expectedType" select="$type" />
			</f:thunk>
		</f:template>

		<!-- <xsl:call-template name="prettyPrint">
			<xsl:with-param name="node" select="$infonArgs" />
		</xsl:call-template> -->
		
		<!-- <xsl:call-template name="prettyPrint">
			<xsl:with-param name="node" select="$rtInputs" />
		</xsl:call-template> -->


		<f:include url="util/printInfon.xml" />
		
		<f:include url="/xml/debug/prettyPrint.xml" />
	</f:template>
	
	
	
	
	
	<!-- <f:template name="printObject">
		
		<html:div>Object Here</html:div>
	</f:template> -->
	
</f:template>