<f:template name="testTemplate"
	xmlns:f="http://www.worldmerge.com/2008/xsl"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:html="http://www.w3.org/1999/xhtml"
	xmlns:svg="http://www.w3.org/2000/svg">
	
	<f:param name="focus" type="Object" />
	<f:param name="propertiesState" type="UI.propertiesState" />
	
	<f:derive name="name" d="getName focus" />
	
	<f:derive name="editName" d="UI.propertiesState:editName propertiesState" />
	<f:derive name="typeDisplay" d="UI.prefs:typeDisplay ui.prefs" />
	
	<f:derive name="focustypes" d="getOntProp shared.isA focus" />
	
	<!-- These are a total hack -->
	<!-- <xsl:if test="$ontInfons" /> -->
	<!-- <xsl:if test="$typeInfons" /> -->
	
	<f:derive name="newTypes" d="UI.propertiesState:newTypes propertiesState" />
	
	<html:table class="properties">
		<html:tr>
			<html:th>Name</html:th>
			<html:td>

				<xsl:choose>
					<xsl:when test="not($name/*) or $editName/*">
						<html:form>
							<html:input name="newName" type="text" value="{$name/*/@value}">
								<f:on event="manualblur" with-action="$changeName">
									<f:with-param-browser name="newName" form="newName" />
								</f:on>
							</html:input>
						</html:form>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="$name/*/@value" />
						<html:button style="margin-left: 20px;">
							<f:on event="click" with-action="$eName" />
							Edit
						</html:button>
					</xsl:otherwise>
				</xsl:choose>
			</html:td>
		</html:tr>
		<html:tr>
			<html:th>Is A</html:th>
			<html:td>
				<f:each select="$focustypes" key="type">
					<html:div>
						<f:thunk url="../view2/object.xml">
							<f:with-param name="focus" select="$type" />
						</f:thunk>
						<html:button>
							Remove
							<f:on event="click" with-action="$removeType">
								<f:with-param name="type" select="$type" />
							</f:on>
						</html:button>
					</html:div>
				</f:each>
				
				<!-- <f:thunk with-template="$typeExplorer" /> -->
				<f:each select="$newTypes" key="outlineNode">
					<f:thunk url="../typeExplorer/typeExplorer.xml">
						<f:with-param name="outlineNode" select="$outlineNode" />
						<f:with-param name="extra" select="$typeExtra" />
					</f:thunk>
				</f:each>
				
				<html:button>
					<f:on event="click" with-action="$addNewType" />
					Add New Type
				</html:button>
				(This whole UI will be revisited! -Toby)

			</html:td>
		</html:tr>
	</html:table>
	
	<f:action name="removeType">
		<f:param name="type" type="Object" />
		<f:derive name="ontInfon" d="bindUnit getObjectInOnt (mapUnit Cons~Object (bindUnit (swap Cons::lookup type) (mapUnit Cons~Object (Cons::lookup shared.isA focus))))" />
		
		<f:each select="$ontInfon">
			<f:intact object="$ontInfon" action="remove" property="truth" />
		</f:each>
	</f:action>
	
	<f:action name="addNewType">
		<f:derive name="type" d="shared.type" />
		<f:create type="UI.outlineNode" name="newOutlineNode">
			<f:with-param name="focus" select="$type" />
		</f:create>
		<f:intact object="$propertiesState" property="newTypes" action="add" key="$newOutlineNode" />
	</f:action>
	
	<f:derive name="object" d="focus" /> <!-- kinda ugly that I have to rename this, this is the problem with calls using named parameters (rather than ordered parameters) -->
	<f:template name="typeExtra">
		<f:param name="focus" type="Object" />
		
		<f:on event="click" with-action="$selectType" />
		<f:action name="selectType">
			<f:perform with-action="$typeObject">
				<f:with-param name="object" select="$object" />
				<f:with-param name="type" select="$focus" />
			</f:perform>
		</f:action>
	</f:template>
	
	
	
	
	<f:action name="eName">
		<f:intact object="$propertiesState" action="add" property="editName" key="null" />
	</f:action>
	
	<f:action name="changeName">
		<f:param name="newName" type="String" />
		<f:derive name="ontInfons" d="flattenSetUnit ((mapSet (compose getObjectInOnt Cons~Object)) (getOntInfons shared.name focus))" />
		
		<!-- remove old name(s) -->
		<f:each select="$ontInfons" key="ontInfon">
			<f:intact object="$ontInfon" action="remove" property="truth" key="null" /> <!-- TODO shouldn't need a key -->
		</f:each>
		
		<f:perform with-action="$nameObject">
			<f:with-param name="object" select="$focus" />
			<f:with-param name="name" select="$newName" />
		</f:perform>
		
		<f:intact object="$propertiesState" action="remove" property="editName" key="null" /> <!-- TODO shouldn't need a key -->
		
	</f:action>




	<f:include url="/xml/util/uiActions.xml" />
	<f:include url="/xml/util/actions.xml" />
	
</f:template>