<f:template name="testTemplate"
	xmlns:f="http://www.worldmerge.com/2008/xsl"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:html="http://www.w3.org/1999/xhtml"
	xmlns:svg="http://www.w3.org/2000/svg">
	
	<f:param name="focus" type="Object" />
	<f:param name="propertiesState" type="UI.propertiesState" />
	
	<f:derive name="name" d="getName focus" />
	
	<f:derive name="ontInfons" d="flattenSetUnit ((mapSet (compose getObjectInOnt Cons~Object)) (getOntInfons shared.name focus))" />

	<f:derive name="editName" d="UI.propertiesState:editName propertiesState" />
	<f:derive name="typeDisplay" d="UI.prefs:typeDisplay ui.prefs" />
	
	<f:derive name="focustypes" d="getOntProp shared.isA focus" />
	<f:derive name="typeInfons" d="flattenSetUnit ((mapSet (compose getObjectInOnt Cons~Object)) (getOntInfons shared.isA focus))" />
	
	<!-- These are a total hack -->
	<xsl:if test="$ontInfons" />
	<xsl:if test="$typeInfons" />
	
	<html:table class="properties">
		<html:tr>
			<html:th>Name</html:th>
			<html:td>

				<xsl:choose>
					<xsl:when test="not($name/*) or $editName">
						<html:form>
							<html:input name="newName" type="text" value="{$name/*/@value}">
								<f:on event="manualblur" with-action="$changeName">
									<f:with-param-browser name="newName" form="newName" />
								</f:on>
							</html:input>
						</html:form>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="$name/*/@value" />
						<html:button style="margin-left: 20px;">
							<f:on event="click" with-action="$eName" />
							Edit
						</html:button>
					</xsl:otherwise>
				</xsl:choose>
			</html:td>
		</html:tr>
		<html:tr>
			<html:th>Type</html:th>
			<html:td>
				<xsl:choose>
					<xsl:when test="$focustypes/*">
						<f:thunk url="../view2/object.xml">
							<f:with-param name="focus" select="$focustypes/*[1]" />
						</f:thunk>
					</xsl:when>
					<xsl:otherwise>
						[Choose Type]
					</xsl:otherwise>
				</xsl:choose>
				<f:on event="click" with-action="$showTypePopup">
					<f:with-param-browser name="x" prop="mouseX" />
					<f:with-param-browser name="y" prop="mouseY" />
				</f:on>
			</html:td>
		</html:tr>
	</html:table>
	
	<f:action name="eName">
		<f:intact object="$propertiesState" action="add" property="editName" key="null" />
	</f:action>
	
	<f:action name="changeName">
		<f:param name="newName" type="String" />
		
		<!-- <f:derive name="ontInfons" d="flattenSetUnit ((mapSet (compose getObjectInOnt Cons~Object)) (getOntInfons shared.name focus))" /> -->
		
		<!-- remove old name(s) -->
		<xsl:for-each select="$ontInfons/*">
			<f:intact object="." action="remove" property="truth" key="null" /> <!-- TODO shouldn't need a key -->
		</xsl:for-each>
		
		<f:perform with-action="$nameObject">
			<f:with-param name="object" select="$focus" />
			<f:with-param name="name" select="$newName" />
		</f:perform>
		
		<f:intact object="$propertiesState" action="remove" property="editName" key="null" /> <!-- TODO shouldn't need a key -->
		
	</f:action>



	<f:template name="typePopup">
		<f:derive name="objects" d="getObjectsOfType shared.type.type" />

		<xsl:for-each select="$objects/*">
			<html:div class="entry">
				<f:on event="click" with-action="$selectType">
					<f:with-param name="selectedType" select="." />
				</f:on>
				<f:thunk url="../view2/object.xml">
					<f:with-param name="focus" select="." />
				</f:thunk>
			</html:div>
		</xsl:for-each>
		<f:action name="selectType">
			<f:param name="selectedType" type="Object" />

			<xsl:for-each select="$typeInfons/*">
				<f:intact object="." action="remove" property="truth" key="null" /> <!-- TODO shouldn't need a key -->
			</xsl:for-each>
			
			<f:perform with-action="$typeObject">
				<f:with-param name="object" select="$focus" />
				<f:with-param name="type" select="$selectedType" />
			</f:perform>
				
			<f:perform with-action="$hidePopup" />
		</f:action>
	</f:template>
	
	<f:action name="showTypePopup">
		<f:param name="x" type="Number" />
		<f:param name="y" type="Number" />
		
		<f:perform with-action="$showPopup">
			<f:with-param name="x" select="$x" />
			<f:with-param name="y" select="$y" />
			<f:with-param name="width" select="300" as="Number" />
			<f:with-param name="height" select="300" as="Number" />
			<f:with-param name="content" select="$typePopup" />
		</f:perform>
	</f:action>


	<f:include url="/xml/util/uiActions.xml" />
	<f:include url="/xml/util/actions.xml" />
	
</f:template>