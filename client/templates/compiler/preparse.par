[*

var preParser = function() {

	var output = "";

	function makeTextNode(text) {
		return "<p:textnode>" + text + "</p:textnode>";
	}
	
	function makeFunction(text) {
		return "<p:function>" + text + "</p:function>"
	}

*]


/~
	--- These are the token definitions ---
~/

/~ Characters to be ignored... ~/
!	'\ \t\r\n//[^\n]*\n'
	;

/~	Grammar Tokens			~/
	'<f\:[^<^>]*>'	FTAG
	'\<\/'
	'\/\>'
	'\<'
	'\-\>'
	'\>'
	'\{'
	'\}'
	'//[^\n]*\n'		COMMENT
	'\/'
	'function'
	'\('
	'\)'
	'[\ \t\r\n]+'		WS
	'(\^|[^\(^\)^\{^\}^\ ^\t^\r^\n^\<^\>^/])+'	IDENTIFIER
	;
##

/~
	--- And here's the grammar specification ---
~/

TOP:
	CONTENT											[* output = %1; *]
	;

WORD:
	IDENTIFIER
	| COMMENT										[* %% = ""; *]
	;

CONTENT:
	CONTENT TEXT									[* %% = %1 + %2; *]
	| CONTENT XML									[* %% = %1 + %2; *]
	| CONTENT 'function' ARGS '{' FUNCTIONBODY '}'	[* %% = %1 + makeFunction(%2 + %3 + %4 + %5 + %6); *]
	| 												[* %% = ""; *]
	;

FUNCTIONBODY:
	FUNCTIONBODY WORD							[* %% = %1 + %2; *]
	| FUNCTIONBODY NONBRACKET						[* %% = %1 + %2; *]
	| FUNCTIONBODY '{' FUNCTIONBODY '}'				[* %% = %1 + %2 + %3 + %4; *]
	|												[* %% = ""; *]
	;

ARGS:
	ARGS WORD									[* %% = %1 + %2; *]
	| ARGS NONBRACKET								[* %% = %1 + %2; *]
	| 												[* %% = ""; *]
	;

NONBRACKET:
	| '>'
	| '/>'
	| '->'
	| '/'
	| '('
	| ')'
	| WS
	| FTAG
	| 'function'
	;

TEXT:
	TEXT WORD									[* %% = %1 + %2; *]
	| TEXT WS										[* %% = %1 + %2; *]
	| TEXT '>'										[* %% = %1 + %2; *]
	| TEXT '/>'										[* %% = %1 + %2; *]
	| TEXT '->'										[* %% = %1 + %2; *]
	| TEXT '/'
	| TEXT '{'										[* %% = %1 + %2; *]
	| TEXT '}'										[* %% = %1 + %2; *]
	| TEXT '('										[* %% = %1 + %2; *]
	| TEXT ')'										[* %% = %1 + %2; *]
	| 												[* %% = ""; *]
	;

XML:
	FTAG CONTENT '</' WORD '>'				[* %% = %1 + %2 + %3 + %4 + %5; *]
	| '<' INTAG '>' INXMLCONTENT '</' WORD '>'[* %% = %1 + %2 + %3 + %4 + %5 + %6 + %7; *]
	| '<' INTAG '/>'								[* %% = %1 + %2 + %3; *]
	;

NONGT:
	'->'
	| '{'
	| '}'
	| '('
	| ')'
	| WS
	| 'function'
	;

INTAG:
	INTAG WORD								[* %% = %1 + %2; *]
	| INTAG NONGT									[* %% = %1 + %2; *]
	| 												[* %% = ""; *]
	;

INXMLCONTENT:
	INXMLCONTENT TEXT								[* %% = %1 + makeTextNode(%2); *]
	| INXMLCONTENT XML								[* %% = %1 + %2; *]
	| INXMLCONTENT 'function' ARGS '{' FUNCTIONBODY '}'	[* %% = %1 + makeFunction(%2 + %3 + %4 + %5 + %6); *]
	| 												[* %% = ""; *]
	;
	
	
[*

	return {
		parse: function(str) {
			var error_cnt = 0; 
			var error_off = new Array(); 
			var error_la = new Array();
			if( ( error_cnt = __parse( str, error_off, error_la ) ) > 0 ) { 
				print("PreParse errors");
				for( i = 0; i < error_cnt; i++ ) {
					var lineInfo = countLines(str, error_off[i]);
					print("    error on line", lineInfo.lines + ", column:", lineInfo.column, "expecting \"" + error_la[i].join() + "\" near:", "\n" + lineInfo.line + "\n                              ^\n");
				}
			}
			return output;
		}
	};
}();

*]