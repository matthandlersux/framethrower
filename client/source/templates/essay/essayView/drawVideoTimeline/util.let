reciprocal = function(x::Number)::Number { return 1/x; },
ceil = function(x::Number)::Number { return Math.ceil(x); },
floor = function(x::Number)::Number { return Math.floor(x); },
round = function(x::Number)::Number { return Math.round(x); },

product = function(x::Number, y::Number)::Number { return x*y; },
quotient = function(x::Number, y::Number)::Number { return x/y; },
pow = function(x::Number, y::Number)::Number { return Math.pow(x,y); },
max = function(x::Number, y::Number)::Number { return Math.max(x,y); },
min = function(x::Number, y::Number)::Number { return Math.min(x,y); },

sign = function(x::Number)::Number {
  if(x>0) return 1;
  if(x==0) return 0;
  return -1;
},

// convert i from [0,m] to [0,n]:
scale = function(m::Number, n::Number, i::Number)::Number {
  return i*n/m;
},

concat = function(s::String, t::String) { return s+t; },

tertiary = function(a::Bool, x, y) {
  return a ? x : y;
},

makePercent = function (fraction::Number)::String {
  return (100*fraction)+"%";
},

// trailing spaces for easy concatenation:
svgTranslate = function(dx::Number, dy::Number) { return "translate("+dx+" "+dy+") "; },
svgScale = function(kx::Number, ky::Number) { return "scale("+kx+" "+ky+") "; },

getMediaURL = function(id::String, type::String)::String {
  return "http:/"+"/media.eversplosion.com/tmp/"+id+"-"+type;
  // return "http:/"+"/media.eversplosion.com/media.php?id="+id+"&type="+type;
},

getLocalMediaURL = function(id::String, type::String)::String {
  return "file:/"+"/"+"/Users/harold/Public/MOULIN_ROUGE/"+id+"-"+type;
},

sum = plus,
difference = subtract,
negation = x -> difference 0 x,

// clamp x in [a,b]:
clamp = a -> b -> x -> max a (min b x),

// f(x/n)*n:
toMultiple = f -> n -> x -> product (f (quotient x n)) n
