
debug = jsaction(x::a)::Void {
	console.log(x);
},

remoteId = function(x::a)::String {
	return x.name;
},

getDivText = jsaction()::String {
	var div = document.getElementById(evalExpr("noteId"));
	// TODO handle <br/>
	return div.textContent;
},

setDivText = jsaction(text::String)::Void {
	var div = document.getElementById(evalExpr("noteId"));

	// clear note:
	while (div.lastChild)
		div.removeChild(div.lastChild);

	div.textContent = text;
},

addDivRange = jsaction(rangeId::String, rangeValue::Range, textRange::TextRange)::Void {
	// cf creating W3C ranges, which may give us most of this for free...
	var div = document.getElementById(evalExpr("noteId"));
	var text = div.textContent;
	var start = evalExpr("range_start rangeValue");
	var end = start + evalExpr("range_length rangeValue");
	
	var range = document.createRange();
	var childStart = 0;
	for(var i=0; i<div.childNodes.length; i++) {
		var child = div.childNodes[i];
		if (child.textContent) {
			var childEnd = childStart + child.textContent.length;
			
			if(childStart<=start && start<childEnd)
				range.setStart(child, start-childStart);

			if(childStart<end && end<=childEnd) {
				range.setEnd(child, end-childStart);
				break;
			}
			
			// // <...|...|...>
			// if (start <= childStart && end > childEnd)
			// 	child.textContent = "";
			// 	
			// // |...<...|...>
			// else if (start < childEnd && end > childEnd)
			// 	child.textContent = text.substring(childStart, start);
			// 
			// // <...|...>...|
			// else if (start <= childStart && end > childStart)
			// 	child.textContent = text.substring(end, childEnd);
			// 
			// // |...<...>...|
			// else if (start < childEnd && end > childStart) {
			// 	child.textContent = text.substring(end, childEnd);
			// 	var child2 = document.createTextNode( text.substring(childStart, start) );
			// 	div.insertBefore(child2, child);
			// 	i++; // keep i correct
			// }
			// 
			// if (end < childEnd) // we're done
			// 	break;

			childStart = childEnd; // for next child
		}
	}
	
	var span = document.createElement("span");
	span.textContent = text.substring(start, end);
	span.style.border = "1pt solid black";
	
	range.surroundContents(span);
	
	// if (i < div.childNodes.length)
	// 	div.insertBefore(span, div.childNodes[i]);
	// else
	// 	div.appendChild(span);
},

updateDivSelection = jsaction()::Bool {
	var div = document.getElementById(evalExpr("noteId"));
	var range = window.getSelection().getRangeAt(0);
	console.log(range);

	// does target div contain the selection?:
	var ancestor = range.commonAncestorContainer;
	while (ancestor && ancestor!==div)
		ancestor = ancestor.parentNode;
	if (ancestor!==div) { // no selection
		if(evalExpr("divSelectionS").getState().length>0) { // but there used to be a selection
			executeAction(evalExpr("unset divSelectionS"));
			return true;
		}
		return false; // no change
	}
		
	var k = 0, start, end;
	for (var i=0; i<div.childNodes.length; i++) {
		var child = div.childNodes[i];
		if (child===range.startContainer)
			start = k + range.startOffset;
		if (child===range.endContainer)
			end = k + range.endOffset;
		if (child.textContent)
			k += child.textContent.length;
		// else if (child.tagName === 'br')
		// 	k += 1;
	}
	
	if (evalExpr("divSelectionS").getState().length===0
		|| evalExpr("mapUnit range_start divSelectionS").getState()[0]!==start
		|| evalExpr("mapUnit range_length divSelectionS").getState()[0]!==end-start)
	{
		executeAction(evalExpr("set divSelectionS (makeRange "+start+" "+(end-start)+")"));
		return true;
	}
	return false; // no change
}
