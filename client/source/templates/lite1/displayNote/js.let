
MaybeRange := (Bool, Range),
emptyMaybeRange = (false, makeRange 0 0),
makeMaybeRange = makeTuple2 true,
maybeRange_maybe = fst,
maybeRange_range = snd,

debug = jsaction(x::a)::Void {
	console.log(x);
},

remoteId = function(x::a)::String {
	return x.name;
},

getDivText = jsaction()::String {
	var div = document.getElementById(evalExpr("noteId"));
	// TODO handle <br/>
	return div.textContent;
},

setDivText = jsaction(text::String)::Void {
	var div = document.getElementById(evalExpr("noteId"));

	// clear note:
	while (div.lastChild)
		div.removeChild(div.lastChild);

	div.textContent = text;
},

addDivRange = jsaction(rangeId::String, rangeValue::Range)::Void {
	var div = document.getElementById(evalExpr("noteId"));
	var start = evalExpr("range_start rangeValue");
	var end = start + evalExpr("range_length rangeValue");
	
	var range = document.createRange();
	var childStart = 0;
	for(var i=0; i<div.childNodes.length; i++) {
		var child = div.childNodes[i];
		if (child.textContent) {
			var childEnd = childStart + child.textContent.length;
			
			if(childStart<=start && start<childEnd)
				range.setStart(child, start-childStart);

			if(childStart<end && end<=childEnd) {
				range.setEnd(child, end-childStart);
				break;
			}

			childStart = childEnd; // for next child
		}
	}
	
	var span = document.createElement("span");
	span.id = rangeId;
	span.className = "noteRange";
	
	range.surroundContents(span);
},

removeDivRange = jsaction(rangeId::String)::Void {
	var span = document.getElementById(rangeId);
	if (!span)
		return;

	var text = document.createTextNode(span.textContent);
	span.parentNode.replaceChild(text, span);
},

updateDivSelection = jsaction(oldSelection::MaybeRange)::(Bool, MaybeRange) {
	var div = document.getElementById(evalExpr("noteId"));
	var range = window.getSelection().getRangeAt(0);

	// does target div contain the selection?:
	var ancestor = range.commonAncestorContainer;
	while (ancestor && ancestor!==div)
		ancestor = ancestor.parentNode;
	if (ancestor!==div) { // no selection
		if(evalExpr("maybeRange_maybe oldSelection")) // but there used to be a selection
			return evalExpr("(true, emptyMaybeRange)"); // range changed, to empty range.
		return evalExpr("(false, oldSelection)"); // no change
	}
		
	var k = 0, start, end;
	for (var i=0; i<div.childNodes.length; i++) {
		var child = div.childNodes[i];
		if (child===range.startContainer)
			start = k + range.startOffset;
		if (child===range.endContainer)
			end = k + range.endOffset;
		if (child.textContent)
			k += child.textContent.length;
		// else if (child.tagName === 'br')
		// 	k += 1;
	}
	
	if (!evalExpr("maybeRange_maybe oldSelection")
		|| evalExpr("range_start (maybeRange_range oldSelection)") !== start
		|| evalExpr("range_length (maybeRange_range oldSelection)") !== end-start)
	{
		return evalExpr("(true, makeMaybeRange (makeRange "+start+" "+(end-start)+"))");
	}
	return false; // no change
},

divSelectNoteSelection = jsaction()::Void {
	var noteSelection = document.getElementById("noteSelection");
	if (!noteSelection)
		return;

	var range = document.createRange();
	range.selectNode(noteSelection);
	
	var selection = window.getSelection();
	if (selection.rangeCount > 0)
		selection.removeAllRanges();
	selection.addRange(range);
}
