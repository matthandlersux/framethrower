makeTestClass = action (num::Number, str::String) {
	TestObject <- create(TestClass, {staticString: str}),
	set (TestClass:num TestObject) num,
	set (TestClass:str TestObject) str,
	return TestObject
},

clone = action (input::TestClass) {
	TestObject <- create(TestClass, {}),
	extract TestClass:str input as name {
		set (TestClass:str TestObject) name
	},
	return TestObject
},

TestObject1 = state {makeTestClass 5 "hello"},
TestObject2 = state {makeTestClass 8 "goodbye"},

changeString = action (input::String) {
	set (TestClass:str TestObject1) input,
	return input
},

changeString2 = action (input::String) {
	set (TestClass:str TestObject2) input,
	return input
},


TestCell = state {
	MySet <- create(Set TestClass),
	add MySet TestObject1,
	add MySet TestObject2,
	return MySet
},







addNewChild = action (children::Set OutlineNode) {
	newChild <- create(OutlineNode),
	add children newChild	
},

setName = action (stringContainer::Unit String, value::String) {
	set stringContainer value
},

makeNode = action (string::String) {
	node <- create(OutlineNode),
	set (OutlineNode:string node) string,
	return node
},

makeChild = action (string::String, parent::OutlineNode) {
	child <- makeNode string,
	add (OutlineNode:children parent) child,
	return child
},

removeChild = action (node::OutlineNode, child::OutlineNode) {
	children = OutlineNode:children node,
	remove children child
},

root = state {
	Grandparents <- makeNode "Grandparents",
	Dad <- makeChild "Dad" Grandparents,
	Aunt <- makeChild "Aunt Kathy" Grandparents,
	Uncle <- makeChild "Uncle Doug" Grandparents,
	
	makeChild "Me" Dad,
	makeChild "Sara" Aunt,
	makeChild "Rachel" Aunt,
	makeChild "Michelle" Aunt,
	
	makeChild "Sean" Uncle,
	makeChild "James" Uncle,
	makeChild "Daniel" Uncle,
	
	return Grandparents
}