Visdebug Structure:

var visdebug = function(){
	bunch of variables keeping track of user input state
	compileXSL for transforms to html and svg
	rootSituation
	O: array to keep track of all the objects and their positions, etc.

	"Private" functions:
	
		document functions: (should probably be moved to init)
			document.onmousemove: always keeps track of mouse x and y
			document.onmousedown: prevents selecting html
			document.onmouseup: user no longer dragging anything
			document.onkeydown: track pressing R for resize and Z for zoom
			document.onkeyup: user no longer pressing z or r
		
		
		testTopLevelObject(obj): checks if any javascript object is a "special" object, i.e. and object that would be in the objectCache

		objectToXML = makeObjectToXML(testTopLevelObject): turns a javascript object in the object cache to XML. Anything that testTopLevelObject returns true for will be put in the XML as a pointer to the id, and a link will be added to O[id].
		
		updatePosition(direction): moves svg objects to match "this". Checks for situation constraints and such. Each O[id] will have this function.
		
		mousedown: sets up dragging and sets the object being dragged to "this". Each O[id].objectsvg will have this function.
		
		calcCoord(x,y,ctmNode): converts absolute x,y coordinates to "viewBox" coordinates. Necessary to allow zooming.
		
	"Public" functions:
	
		submitenter(myfield, e): evaluates the text in myfield as javascript and clears the text. Runs rootSit2Screen after evaluation to update O for all objects - extra work here unnecessary.
		
		run: gets called every 16 milliseconds or so. Performs appropriate actions based on user input. I think this is helpful so that we don't have to do all the position updating constantly as the mouse is being dragged. Sort of a frame rate limiter...
		
		rootSit2Screen: parses the object structure from the rootSituation, filling a local objectCache. First clears all svg on page except background. Converts each object first to XML, then to svg plus svg for links using XSL, and adds the svg to the page with appropriate z index. Will keep x, y, radius values from previous iterations, but everything else is done from scratch because we don't know which objects have changed. This also adds the mousedown and updatePosition functions to the appropriate objects so the system is ready to respond to user input. This function looks for specific keywords to make certain links not appear, such as the objects links between a situation and all objects contained within it.
		
		init(testFunc): initializes the rootSituation, and then runs testFunc which is generally one of the functions from tests.js. This function is called by the onload method of the html body with the appropriate testFunc. This also sets up some initial display variables. Then this runs rootSit2Screen to get everything started.
}