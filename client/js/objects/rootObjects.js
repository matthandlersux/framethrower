// ==================================================================
// Root Objects
// ==================================================================

// these are predefined objects, objects that the client and server both know about

var rootObjects = {};

(function () {
	function m(name, className, props) {
		if (!className) className = "Object";
		
		if (!LOCAL && name.substr(0, 7) === "shared.") {
			rootObjects[name] = makeRemoteObject(name, parseType(className));
		} else {
			if (objects.isClass(className)) {
				rootObjects[name] = objects.make(className, props);
			} else {
				rootObjects[name] = makeControlledCell(className);
			}
			
			rootObjects[name].name = name;
		}
		
		base.add(name, rootObjects[name]);
	}
	
	m("shared.in");
	m("shared.ont");
	
	m("shared.isA");

	m("shared.relationTemplate");
	m("shared.name");
	m("shared.thumbnail");
	m("shared.video");
	m("shared.videoTransitionsXML");
	
	m("shared.picture.crop");
	
	// m("shared.type.type");
	m("shared.isType");
	m("shared.type");
	m("shared.type.situation");
	m("shared.type.entity");
	m("shared.type.infon");
	m("shared.type.relation");  // this will itself be used as a binary relation to make relation types
	m("shared.type.poly.a"); // unknown how we want to do polymorphic types.
							// For now, we only allow one polymorphic type per relation type and it has to be the output. For example: in :: Situation -> a -> a
	
	m("shared.type.movie");
	m("shared.type.location");
	m("shared.type.agent");
	
	
	m("shared.realLife");
	
	
	
	m("shared.movie.story");
	m("shared.movie.presentation");
	m("shared.movie.making");
	
	m("shared.movie.timeRange");
	
	
	
	m("shared.video.time");
	
	m("shared.atTime");
	
	
	m("shared.onDate");
	
	
	
	// intel demo layers
	m("shared.intelDemo.media");
	m("shared.intelDemo.rumor1");
	m("shared.intelDemo.rumor2");
	m("shared.intelDemo.sermon");
	
	
	
	m("shared.globalPrefs", "X.prefs");
	
	
	
	m("shared.test.walleMovie");


	//andrew test objects
	m("shared.test.romeo");
	m("shared.test.juliet");
	
	m("shared.test.loves");

	
	// m("test.1");
	// m("test.2");
	// m("test.3");
	
	
	
	
	m("ui.ui", "UI.ui");
	
	m("ui.prefs", "UI.prefs");
	
	m("ui.mainPaneSet", "UI.pane.set");
	m("ui.mainPaneSet.columns", "UI.pane.set");
	
	m("ui.main", "UI.main", {"pane": objects.cast(rootObjects["ui.mainPaneSet"], "UI.pane")});
	

	m("ui.relationCreator.typeExplorer", "UI.outlineNode", {"focus": rootObjects["shared.type"]});
	rootObjects["ui.relationCreator.typeExplorer"].prop["expanded"].control.add(nullObject);
	m("ui.relationCreator", "UI.relationCreator", {"typeExplorer": rootObjects["ui.relationCreator.typeExplorer"]});
	
	
	
	
	
	m("test.typeExplorer", "UI.outlineNode", {"focus": rootObjects["shared.type"]});
	m("test.word", "UI.relationCreator.word");
	rootObjects["test.word"].prop["string"].control.add("");
	m("test.relationCreator", "UI.relationCreator", {"typeExplorer": rootObjects["test.typeExplorer"]});
	rootObjects["test.relationCreator"].prop["words"].control.add("b", rootObjects["test.word"]);
	
	
	
	
	
	
	
	
	
	
	m("test.walleVideo", "X.video", {"url": 'http://media.eversplosion.com/tmp/wallefinallow.mp4', "width": 720, "height": 304, "duration": 5894.139, "frameRate": 23.976024627686});
	
	
	
	m("tobytest.realLife", "Situation");
	
	
	rootObjects["test.walleVideo"].prop["cuts"].control.add([
		3342,
		3509,
		3599,
		3620,
		3720,
		3774,
		3800,
		3837,
		4012,
		4349,
		4396,
		4476,
		4512,
		4892,
		5205,
		5481,
		5653,
		5702,
		5822,
		6241,
		6843,
		7023,
		7081,
		7177,
		7460,
		7636,
		7689,
		7738,
		7788,
		8046,
		8146,
		8683,
		8741,
		8777,
		9030,
		9110,
		11360,
		12319,
		13990,
		14229,
		14500,
		14671,
		14722,
		14913,
		14984,
		15130,
		15181,
		15207,
		15228,
		15278,
		15312,
		15347,
		15389,
		15594,
		15611,
		15633,
		15667,
		15778,
		15858,
		15913,
		16025,
		16049,
		16071,
		16088,
		16195,
		16325,
		16373,
		16566,
		16633,
		16735,
		16802,
		16978,
		17029,
		17138,
		17214,
		17364,
		17571,
		17693,
		17742,
		17829,
		17883,
		17941,
		18254,
		18440,
		18509,
		18566,
		18630,
		18723,
		18790,
		18846,
		18944,
		19008,
		19291,
		19324,
		19407,
		19474,
		19548,
		19549,
		19550,
		19642,
		19781,
		19826,
		19831,
		19832,
		20227,
		20514,
		20590,
		20690,
		20731,
		20774,
		20964,
		21411,
		21604,
		21717,
		21908,
		22137,
		22138,
		22139,
		22235,
		22390,
		22489,
		22566,
		22660,
		22736,
		22820,
		22928,
		22986,
		23057,
		23097,
		23150,
		23358,
		23455,
		23513,
		23581,
		24012,
		24138,
		24186,
		24328,
		24515,
		24679,
		24766,
		24974,
		25052,
		25216,
		25265,
		25288,
		25295,
		25308,
		25536,
		25586,
		25828,
		26216,
		26542,
		26651,
		26857,
		26890,
		26912,
		26914,
		26925,
		26943,
		27221,
		27244,
		27310,
		27335,
		27350,
		27874,
		27980,
		28002,
		28152,
		28581,
		28637,
		28878,
		30177,
		30232,
		30472,
		30500,
		30533,
		30534,
		30539,
		30564,
		30586,
		30607,
		30642,
		30661,
		30662,
		30663,
		30691,
		31153,
		31246,
		31516,
		31764,
		31838,
		32107,
		32226,
		32266,
		32322,
		32353,
		32420,
		32442,
		32479,
		32827,
		32889,
		32993,
		33125,
		33196,
		33295,
		33367,
		33787,
		33829,
		33872,
		36884,
		37028,
		37088,
		37142,
		37681,
		37762,
		39735,
		39812,
		39868,
		39936,
		40006,
		40376,
		41127,
		41193,
		41290,
		41346,
		41420,
		41444,
		41453,
		41464,
		41469,
		41480,
		41482,
		42169,
		42258,
		42341,
		42423,
		42859,
		43013,
		43014,
		43015,
		43016,
		43017,
		43115,
		43116,
		43117,
		43119,
		43120,
		43121,
		43122,
		43123,
		43137,
		43252,
		43286,
		43330,
		43372,
		43470,
		43511,
		43604,
		43688,
		43857,
		43912,
		43990,
		44422,
		45216,
		45280,
		45360,
		45408,
		45536,
		45677,
		45727,
		45780,
		45853,
		46017,
		46117,
		46188,
		46294,
		46340,
		46368,
		46410,
		46444,
		46563,
		46677,
		46743,
		46777,
		46863,
		46928,
		46974,
		47068,
		47126,
		47209,
		47260,
		47294,
		47319,
		47380,
		47470,
		47826,
		48157,
		48292,
		48326,
		48436,
		48647,
		48733,
		48810,
		48857,
		48915,
		49421,
		49586,
		49790,
		51572,
		51733,
		51758,
		51824,
		51856,
		51884,
		51904,
		51927,
		51943,
		51981,
		52007,
		52030,
		52050,
		52071,
		52101,
		52126,
		52155,
		52186,
		52210,
		52420,
		52461,
		52478,
		52612,
		52638,
		52708,
		52781,
		52809,
		52848,
		52943,
		52984,
		53046,
		53078,
		53196,
		53271,
		53312,
		53391,
		53476,
		53542,
		53616,
		53877,
		54009,
		54320,
		54405,
		54592,
		54637,
		54684,
		54729,
		54817,
		54973,
		55039,
		55138,
		55172,
		55338,
		55410,
		55800,
		55872,
		55941,
		55976,
		56169,
		56312,
		56604,
		56676,
		56789,
		57019,
		57086,
		57275,
		57317,
		57339,
		57343,
		57357,
		57382,
		57416,
		57441,
		57465,
		57501,
		57529,
		57553,
		57653,
		57803,
		57894,
		58002,
		58204,
		58395,
		58541,
		58641,
		58701,
		58749,
		58821,
		59039,
		59091,
		59162,
		59211,
		59271,
		59307,
		59349,
		59439,
		59493,
		59528,
		59531,
		59532,
		59533,
		59534,
		59535,
		59536,
		59537,
		59538,
		59539,
		59540,
		59618,
		59678,
		59752,
		59792,
		59867,
		59868,
		59869,
		59870,
		59871,
		59872,
		59877,
		59878,
		59974,
		60074,
		60075,
		60076,
		60077,
		60078,
		60079,
		60080,
		60081,
		60082,
		60083,
		60084,
		60085,
		60114,
		60174,
		60404,
		60457,
		60669,
		60797,
		61092,
		61093,
		61094,
		61095,
		61097,
		61098,
		61099,
		61247,
		61496,
		61548,
		61722,
		61940,
		62005,
		62091,
		62150,
		62203,
		62267,
		62431,
		62586,
		62636,
		62703,
		63835,
		63860,
		63902,
		63934,
		63990,
		64027,
		64103,
		64374,
		64407,
		64450,
		64680,
		64785,
		65116,
		65388,
		65466,
		65717,
		65743,
		65857,
		65912,
		65951,
		65952,
		65953,
		65954,
		65955,
		65956,
		65957,
		65999,
		66038,
		66058,
		66110,
		66444,
		66611,
		66681,
		66761,
		66815,
		67151,
		67201,
		67293,
		67352,
		67451,
		67502,
		67645,
		67709,
		67808,
		67895,
		68550,
		68654,
		69118,
		69283,
		69970,
		70011,
		70569,
		70607,
		70642,
		70785,
		70867,
		70963,
		71012,
		71782,
		71861,
		72439,
		72476,
		73018,
		73131,
		73234,
		73414,
		73487,
		73684,
		73812,
		73913,
		74007,
		74231,
		74328,
		74418,
		74606,
		75006,
		75058,
		75118,
		75249,
		75477,
		75506,
		75541,
		75783,
		75849,
		75914,
		76265,
		76314,
		76315,
		76316,
		76317,
		76406,
		76444,
		76669,
		76701,
		76967,
		76995,
		77029,
		77057,
		77102,
		77224,
		77276,
		77309,
		77454,
		77497,
		77552,
		77663,
		77692,
		77734,
		77798,
		77867,
		77962,
		78187,
		78305,
		78364,
		78401,
		78402,
		78404,
		78407,
		78435,
		78503,
		78537,
		78558,
		78701,
		78778,
		78794,
		78839,
		78869,
		78911,
		78918,
		78919,
		78942,
		78943,
		78946,
		79163,
		79230,
		79366,
		79406,
		79407,
		79422,
		79456,
		79468,
		79469,
		79470,
		79471,
		79492,
		79565,
		79606,
		79666,
		79720,
		79757,
		79799,
		79820,
		79822,
		79826,
		79827,
		79881,
		79906,
		79931,
		79978,
		80033,
		80081,
		80169,
		80175,
		80345,
		80486,
		80539,
		80585,
		80717,
		81211,
		81313,
		81358,
		81483,
		81557,
		81602,
		81735,
		81815,
		81884,
		81944,
		82008,
		82063,
		82181,
		82204,
		82548,
		82637,
		82701,
		82767,
		82798,
		82867,
		82909,
		83016,
		83036,
		83066,
		83099,
		83104,
		83118,
		83132,
		83133,
		83134,
		83408,
		83733,
		83767,
		83792,
		83878,
		83928,
		84076,
		84124,
		84481,
		84483,
		84484,
		84649,
		84806,
		84831,
		84832,
		85037,
		85054,
		85055,
		85294,
		85541,
		85646,
		85667,
		85748,
		85837,
		85844,
		85845,
		85888,
		86022,
		86045,
		86175,
		86228,
		86363,
		86364,
		86908,
		87000,
		87216,
		87514,
		87551,
		87997,
		88068,
		88113,
		88184,
		88913,
		88970,
		89286,
		89351,
		89567,
		89765,
		89795,
		90226,
		90394,
		90610,
		91599,
		92027,
		92069,
		92126,
		92148,
		92179,
		92306,
		92732,
		92956,
		93184,
		93343,
		93530,
		93579,
		93631,
		93947,
		94369,
		94447,
		94629,
		94717,
		95753,
		95829,
		96005,
		96225,
		96682,
		96810,
		96916,
		96978,
		97218,
		97256,
		97311,
		97372,
		97587,
		97625,
		97659,
		97699,
		98447,
		98638,
		98814,
		99502,
		99559,
		99749,
		99782,
		99953,
		99987,
		100324,
		100386,
		100463,
		100499,
		100774,
		100943,
		101058,
		101065,
		101082,
		101210,
		101273,
		101366,
		101394,
		101464,
		101501,
		101565,
		101679,
		101733,
		102010,
		102193,
		102384,
		102410,
		102459,
		102825,
		103010,
		103344,
		103493,
		103811,
		104051,
		104087,
		104131,
		104294,
		104621,
		104758,
		104801,
		104861,
		104886,
		104918,
		104953,
		105091,
		105258,
		105298,
		105338,
		105382,
		105422,
		105448,
		105494,
		105507,
		105525,
		105527,
		105528,
		105634,
		105704,
		105801,
		105820,
		105924,
		106048,
		106111,
		106151,
		106290,
		106378,
		106404,
		106546,
		106644,
		106790,
		106830,
		106870,
		107336,
		107405,
		107501,
		107645,
		107682,
		107757,
		108051,
		108142,
		108212,
		108355,
		108432,
		108500,
		108548,
		108661,
		108823,
		108959,
		109002,
		109038,
		109076,
		109081,
		109211,
		109351,
		109428,
		109529,
		109574,
		109632,
		109679,
		109746,
		109766,
		109767,
		109768,
		109769,
		109791,
		109793,
		109948,
		109997,
		110021,
		110063,
		110147,
		110223,
		110342,
		110369,
		110439,
		110470,
		110496,
		110532,
		110606,
		110642,
		110677,
		110741,
		110838,
		110950,
		111008,
		111073,
		111414,
		111543,
		111740,
		111798,
		111827,
		111882,
		111930,
		112025,
		112187,
		112227,
		112271,
		112306,
		112378,
		112401,
		112425,
		112468,
		112477,
		112478,
		112479,
		112480,
		112481,
		112496,
		112498,
		112499,
		112501,
		112502,
		112503,
		112504,
		112505,
		112506,
		112507,
		112508,
		112509,
		112517,
		112518,
		112519,
		112520,
		112521,
		112522,
		112523,
		112524,
		112525,
		112526,
		112564,
		112688,
		113910,
		113911,
		113912,
		113913,
		113914,
		113915,
		113972,
		114054,
		114102,
		114107,
		114123,
		114143,
		114159,
		114280,
		114316,
		114361,
		114402,
		114426,
		114489,
		114678,
		114774,
		114911,
		114955,
		115030,
		115085,
		115140,
		115216,
		115325,
		115377,
		115456,
		115500,
		115501,
		115502,
		115503,
		115504,
		115505,
		115506,
		115507,
		115508,
		115509,
		115510,
		115511,
		115512,
		115513,
		115514,
		115540,
		115584,
		115599,
		115600,
		115601,
		115602,
		115603,
		115608,
		115672,
		115694,
		115722,
		115760,
		115785,
		115786,
		115806,
		115838,
		115925,
		115962,
		115992,
		115993,
		115994,
		116011,
		116043,
		116119,
		116171,
		116214,
		116238,
		116296,
		116336,
		116410,
		116460,
		116501,
		116551,
		116611,
		116631,
		116686,
		116750,
		116824,
		116885,
		116983,
		117033,
		117064,
		117091,
		117092,
		117111,
		117188,
		117213,
		117266,
		117440,
		117525,
		117584,
		117620,
		117687,
		117729,
		117818,
		117889,
		117921,
		117958,
		117984,
		118016,
		118076,
		118095,
		118133,
		118290,
		118353,
		118409,
		118451,
		118634,
		118734,
		118782,
		118807,
		118854,
		118916,
		118952,
		118991,
		119039,
		119064,
		119096,
		119192,
		119244,
		119295,
		119327,
		119372,
		119478,
		119533,
		119586,
		119680,
		119783,
		119841,
		119874,
		119944,
		119978,
		120030,
		120065,
		120099,
		120140,
		120232,
		120264,
		120294,
		120328,
		120368,
		120408,
		120485,
		120613,
		120649,
		120690,
		120732,
		120783,
		120837,
		120880,
		120924,
		120925,
		120927,
		120967,
		120998,
		121053,
		121128,
		121196,
		121262,
		121381,
		121536,
		121582,
		121754,
		121840,
		121848,
		121860,
		121890,
		122018,
		122121,
		122182,
		122257,
		122277,
		122297,
		122383,
		122607,
		122645,
		122804,
		123019,
		123020,
		123050,
		123307,
		123354,
		123394,
		123476,
		123514,
		123875,
		123904,
		124258,
		124310,
		124395,
		124497,
		124540,
		124671,
		124793,
		124830,
		124957,
		125050,
		125703,
		125813,
		125860,
		125990,
		126109,
		126115,
		126227,
		126341,
		126499,
		126582,
		126636,
		126740,
		126864,
		126932,
		127032,
		127129,
		127453,
		127573,
		127627,
		127651,
		127712,
		127808,
		127862,
		127897,
		128001,
		128044,
		128240,
		128286,
		128408,
		128448,
		128529,
		140203
	]);
	
	
	// m("test.pane", "UI.pane.pane");
	// rootObjects["test.pane"].prop["focus"].control.add(rootObjects["shared.realLife"]);
	// objects.cast(rootObjects["test.pane"], "UI.pane").prop["width"].control.add(200);	
	// 
	// //rootObjects["test.pane2"].prop["focus"].control.add(rootObjects["shared.type.entity"]);
	// 
	// m("test.paneset", "UI.pane.set");
	// rootObjects["test.paneset"].prop["panes"].control.add("b", objects.cast(rootObjects["test.pane"], "UI.pane"));
	// 
	// //rootObjects["test.paneset"].prop["panes"].control.add("bb", objects.cast(rootObjects["test.pane2"], "UI.pane"));

	// m("ui.main", "UI.main", {"pane": objects.cast(rootObjects["test.paneset"], "UI.pane")});

// 	// m("test.paneset2", "UI.pane.set");
// 	// rootObjects["test.paneset"].prop["panes"].control.add("bb", objects.cast(rootObjects["test.paneset2"], "UI.pane"));
// 	
// 	m("test.pane2", "UI.pane.pane");
// 	rootObjects["test.pane2"].prop["focus"].control.add(rootObjects["shared.realLife"]);
// 	
// 	m("test.pane3", "UI.pane.pane");
// 	rootObjects["test.pane3"].prop["focus"].control.add(rootObjects["shared.realLife"]);
// 	objects.cast(rootObjects["test.pane3"], "UI.pane").prop["width"].control.add(460);
// 
// //	rootObjects["test.paneset"].prop["panes"].control.add("bb", objects.cast(rootObjects["test.pane2"], "UI.pane"));
// 	rootObjects["test.paneset"].prop["panes"].control.add("bbb", objects.cast(rootObjects["test.pane3"], "UI.pane"));
	
	
	// //m("test.consIP", "UI.consIP");
	// m("test.objectIP1", "UI.consIP");
	// m("test.objectIP2", "UI.consIP");
	// m("test.objectIP3", "UI.consIP");
	// 
	// rootObjects["test.objectIP1"].prop["object"].control.add(rootObjects["shared.in"]);
	// 
	// m("test.consIP2", "UI.consIP");
	// rootObjects["test.consIP2"].prop["left"].control.add(rootObjects["test.objectIP1"]);
	// rootObjects["test.consIP2"].prop["right"].control.add(rootObjects["test.objectIP2"]);
	// 
	// m("test.consIP", "UI.consIP");
	// rootObjects["test.consIP"].prop["left"].control.add(rootObjects["test.consIP2"]);
	// rootObjects["test.consIP"].prop["right"].control.add(rootObjects["test.objectIP3"]);
	// 
	// 
	// //rootObjects["test.consIP"].prop["left"].control.add(rootObjects["shared.in"]);
	// //rootObjects["test.consIP"].prop["right"].control.add(rootObjects["shared.realLife"]);
	// 
	// 
	// m("test.picture", "X.picture", {"width": 2448, "height": 3264, "url": "https://private.eversplosion.com/files/photos/yangIMG_1007.jpg"});
	
	
})();




// add some helpful client-side globals
base.add("serverBaseUrl", serverBaseUrl);
