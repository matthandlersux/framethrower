<f:template name="testTemplate"
	xmlns:f="http://www.worldmerge.com/2008/xsl"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:html="http://www.w3.org/1999/xhtml"
	xmlns:svg="http://www.w3.org/2000/svg">
	
	<f:param name="paneset" type="UI.pane.set" />
	<f:param name="width" type="Number" />
	<f:param name="height" type="Number" />
	
	<f:derive name="orient" d="UI.pane.set:orientation paneset" />
	<f:derive name="panes" d="UI.pane.set:panes paneset" />
	<f:derive name="paneWidths" d="getPropMap panes UI.pane:width" />
	<f:derive name="paneHeights" d="getPropMap panes UI.pane:height" />
		
	<xsl:variable name="w" select="$width/@value" />
	<xsl:variable name="h" select="$height/@value" />

	<f:each select="$orient">
		<xsl:variable name="orientation" select="$orient/@value" />
	
		<xsl:variable name="total">
			<xsl:choose>
				<xsl:when test="$orientation = 'horizontal'">
					<xsl:value-of select="$w" />
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="$h" />
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
	
		<xsl:variable name="minsize" select="400" />
		<xsl:variable name="spacing" select="6" />
	
		<xsl:variable name="count" select="count($panes/f:entry)" />
	
		<xsl:variable name="customWidthTotal" select="sum($paneWidths/f:entry/f:value/f:literal/@value)" />
		<xsl:variable name="customWidthCount" select="count($paneWidths/f:entry)" />
		<xsl:variable name="defaultWidth">
			<xsl:choose><xsl:when test="$count = $customWidthCount">0</xsl:when>
				<xsl:otherwise><xsl:value-of select="floor(($total - $customWidthTotal - (($count - 1) * $spacing)) div ($count - $customWidthCount))" /></xsl:otherwise></xsl:choose></xsl:variable>
	
		<xsl:variable name="customHeightTotal" select="sum($paneHeights/f:entry/f:value/f:literal/@value)" />
		<xsl:variable name="customHeightCount" select="count($paneHeights/f:entry)" />
		<xsl:variable name="defaultHeight">
			<xsl:choose><xsl:when test="$count = $customHeightCount">0</xsl:when>
				<xsl:otherwise><xsl:value-of select="floor(($total - $customHeightTotal - (($count - 1) * $spacing)) div ($count - $customHeightCount))" /></xsl:otherwise></xsl:choose></xsl:variable>
	
	
		<html:div class="paneset-{$orientation}">
			<xsl:call-template name="style">
				<xsl:with-param name="width" select="$w" />
				<xsl:with-param name="height" select="$h" />
			</xsl:call-template>
		
			<f:each select="$panes" key="key" value="value">
				<xsl:variable name = "currentKey" select="f:key/f:literal/@value" />
				<xsl:variable name="width">
					<xsl:choose>
						<xsl:when test="$orientation = 'horizontal'">
							<xsl:choose>
								<xsl:when test="$paneWidths/f:entry/f:key/f:literal/@value = $currentKey">
									<xsl:value-of select="$paneWidths/f:entry[f:key/f:literal/@value = $currentKey]/f:value/f:literal/@value" />
								</xsl:when>
								<xsl:otherwise><xsl:value-of select="$defaultWidth" /></xsl:otherwise>
							</xsl:choose>
						</xsl:when>
						<xsl:otherwise><xsl:value-of select="$w" /></xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:variable name="height">
					<xsl:choose>
						<xsl:when test="$orientation = 'vertical'">
							<xsl:choose>
								<xsl:when test="$paneHeights/f:entry/f:key/f:literal/@value = $currentKey">
									<xsl:value-of select="$paneHeights/f:entry[f:key/f:literal/@value = $currentKey]/f:value/f:literal/@value" />
								</xsl:when>
								<xsl:otherwise><xsl:value-of select="$defaultHeight" /></xsl:otherwise>
							</xsl:choose>
						</xsl:when>
						<xsl:otherwise><xsl:value-of select="$h" /></xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
			
				<xsl:variable name="keysSoFar" select="preceding-sibling::*/f:key" />
				<xsl:variable name="countSoFar" select="count($keysSoFar)" />
			
				<xsl:variable name="left">
					<xsl:choose>
						<xsl:when test="$orientation = 'horizontal'">
							<xsl:variable name="customWidthCountSoFar" select="count($paneWidths/f:entry[f:key/f:literal/@value = $keysSoFar/f:literal/@value])" />
							<xsl:variable name="customWidthSoFar" select="sum($paneWidths/f:entry[f:key/f:literal/@value = $keysSoFar/f:literal/@value]/f:value/f:literal/@value)">
							</xsl:variable>						
							<xsl:value-of select="($defaultWidth + $spacing) * ($countSoFar - $customWidthCountSoFar) + $customWidthSoFar + $spacing * $customWidthCountSoFar" />
						</xsl:when>
						<xsl:otherwise><xsl:value-of select="0" /></xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
						
				<xsl:variable name="top">
					<xsl:choose>
						<xsl:when test="$orientation = 'vertical'">
							<xsl:variable name="customHeightCountSoFar" select="count($paneHeights/f:entry[f:key/f:literal/@value = $keysSoFar/f:literal/@value])" />
							<xsl:variable name="customHeightSoFar" select="sum($paneHeights/f:entry[f:key/f:literal/@value = $keysSoFar/f:literal/@value]/f:value/f:literal/@value)" />
							<xsl:value-of select="($defaultHeight + $spacing) * ($countSoFar - $customHeightCountSoFar) + $customHeightSoFar + $spacing * $customHeightCountSoFar" />
						</xsl:when>
						<xsl:otherwise><xsl:value-of select="0" /></xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
			
			
				<html:div class="paneset-pane">
					<xsl:call-template name="style">
						<xsl:with-param name="width" select="$width" />
						<xsl:with-param name="height" select="$height" />
						<xsl:with-param name="left" select="$left" />
						<xsl:with-param name="top" select="$top" />
					</xsl:call-template>
				
					<f:thunk with-template="$innerPane">
						<f:with-param name="key" select="$key" />
						<f:with-param name="pane" select="$value" />
						<f:with-param name="width" select="$width" as="Number" />
						<f:with-param name="height" select="$height" as="Number" />
					</f:thunk>
				
				</html:div>

				<xsl:if test="not(position() = last())">
					<xsl:variable name="swidth">
						<xsl:choose>
							<xsl:when test="$orientation = 'horizontal'"><xsl:value-of select="$spacing" /></xsl:when>
							<xsl:otherwise><xsl:value-of select="$w" /></xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:variable name="sheight">
						<xsl:choose>
							<xsl:when test="$orientation = 'vertical'"><xsl:value-of select="$spacing" /></xsl:when>
							<xsl:otherwise><xsl:value-of select="$h" /></xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:variable name="sleft">
						<xsl:choose>
							<xsl:when test="$orientation = 'horizontal'"><xsl:value-of select="$left + $width" /></xsl:when>
							<xsl:otherwise><xsl:value-of select="0" /></xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:variable name="stop">
						<xsl:choose>
							<xsl:when test="$orientation = 'vertical'"><xsl:value-of select="$top + $height" /></xsl:when>
							<xsl:otherwise><xsl:value-of select="0" /></xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
				
					<html:div class="paneset-spacer">
						<xsl:call-template name="style">
							<xsl:with-param name="width" select="$swidth" />
							<xsl:with-param name="height" select="$sheight" />
							<xsl:with-param name="left" select="$sleft" />
							<xsl:with-param name="top" select="$stop" />
						</xsl:call-template>
					</html:div>
				</xsl:if>
			</f:each>
		</html:div>
	</f:each>
	
	
	

	<f:template name="innerPane">
		<f:param name="key" type="String" />
		<f:param name="pane" type="UI.pane" />
		<f:param name="width" type="Number" />
		<f:param name="height" type="Number" />
		
		<f:thunk url="pane.xml">
			<f:with-param name="closePane" select="$closePane" />
			<f:with-param name="showBadge" select="$prepareShowBadge" />
			<f:with-param name="newPane" select="$newPane" />
			<f:with-param name="pane" select="$pane" />
			<f:with-param name="width" select="$width" />
			<f:with-param name="height" select="$height" />
		</f:thunk>
		
		<f:action name="closePane">
			<f:intact object="$paneset" action="remove" property="panes" key="$key" />
		</f:action>

		<xsl:template name="min">
			<xsl:param name="n1" /><xsl:param name="n2" />
			<xsl:choose>
				<xsl:when test="$n1 &lt; $n2"><xsl:value-of select="$n1" /></xsl:when>
				<xsl:otherwise><xsl:value-of select="$n2" /></xsl:otherwise>
			</xsl:choose>
		</xsl:template>


		<f:action name="prepareShowBadge">
			<f:param name="focus" type="Object" />
			<f:param name="elemX" type="Number" />
			<f:param name="elemY" type="Number" />
			<f:param name="elemWidth" type="Number" />
			<f:param name="elemHeight" type="Number" />
			<f:param name="openObject" type="a -> Unit JS" />

			<f:derive name="screenWidth" d="UI.ui:screenWidth ui.ui" />
			<f:derive name="screenHeight" d="UI.ui:screenHeight ui.ui" />

			<f:each select="$screenWidth">
				<f:each select="$screenHeight">
					<!-- Decide Badge Direction -->
					<xsl:variable name="badgeWidth">
						<xsl:call-template name="min">
							<xsl:with-param name="n1" select="270" />
							<xsl:with-param name="n2" select="floor($screenWidth/@value div 2)" />
						</xsl:call-template>
					</xsl:variable>
					<xsl:variable name="badgeHeight">
						<xsl:call-template name="min">
							<xsl:with-param name="n1" select="300" />
							<xsl:with-param name="n2" select="floor($screenHeight/@value div 2)" />
						</xsl:call-template>
					</xsl:variable>

					<xsl:variable name="arrowHeight" select="60" />
					<xsl:variable name="badgeArrowDistance" select="20" />
					<xsl:variable name="distanceFromMouseX" select="28" />
					<xsl:variable name="distanceFromMouseY" select="-45" />
					
					<xsl:variable name="hor">
						<xsl:choose>
							<xsl:when test="($elemX/@value &lt; ($screenWidth/@value div 2))">left</xsl:when>
							<xsl:when test="($elemX/@value &gt; ($screenWidth/@value div 2))">right</xsl:when>
							<xsl:otherwise>left</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					
					<xsl:variable name="Vert">
						<xsl:choose>
							<xsl:when test="($elemY/@value &lt; ($screenHeight/@value div 2))">top</xsl:when>
							<xsl:when test="($elemY/@value &gt; ($screenHeight/@value div 2))">bottom</xsl:when>
							<xsl:otherwise>left</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					
					<xsl:variable name="arrowOffset">
						<xsl:choose>
							<xsl:when test="$Vert = 'top'">
								<xsl:value-of select="$badgeArrowDistance"/>
							</xsl:when>
							<xsl:when test="$Vert = 'bottom'">
								<xsl:value-of select="$badgeHeight - $badgeArrowDistance - $arrowHeight"/>
							</xsl:when>
							<xsl:when test="($elemY/@value &gt; ($screenHeight/@value div 2))">bottom</xsl:when>
							<xsl:otherwise>left</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					
					
					<xsl:variable name="badgeY">
						<xsl:choose>
							<xsl:when test="$Vert = 'bottom' and ($screenHeight/@value - $elemY/@value &lt; $badgeArrowDistance)">
								<xsl:value-of select="$elemY/@value - $badgeHeight - ($badgeArrowDistance - ($screenHeight/@value - $elemY/@value)) - $distanceFromMouseY + $elemHeight/@value"/>
							</xsl:when>
							<xsl:when test="$Vert = 'bottom'">
								<xsl:value-of select="$elemY/@value - $badgeHeight - $badgeArrowDistance - $distanceFromMouseY + $elemHeight/@value"/>
							</xsl:when>
							<xsl:when test="$Vert = 'top' and ($elemY/@value &lt; $badgeArrowDistance)">
								<xsl:value-of select="$elemY/@value - $badgeArrowDistance + $distanceFromMouseY"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="$elemY/@value + $distanceFromMouseY"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					
					<xsl:variable name="badgeX">
						<xsl:choose>
							<xsl:when test="$hor = 'left'">
								<xsl:value-of select="$elemX/@value + $elemWidth/@value + $distanceFromMouseX"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="$elemX/@value - $badgeWidth - $distanceFromMouseX"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
										
					<f:perform with-action="$showBadge">
						<f:with-param name="hor" select="$hor" as="String" />
						<f:with-param name="arrowOffset" select="$arrowOffset" as="Number"/>
						<f:with-param name="badgeWidth" select="$badgeWidth" as="Number"/>
						<f:with-param name="badgeHeight" select="$badgeHeight" as="Number"/>						
						<f:with-param name="badgeX" select="$badgeX" as="Number"/>
						<f:with-param name="badgeY" select="$badgeY" as="Number"/>
					</f:perform>
				</f:each>
			</f:each>
			
			<f:action name="showBadge">
				<f:param name="badgeX" type="Number" />
				<f:param name="badgeY" type="Number" />
				<f:param name="badgeWidth" type="Number" />
				<f:param name="badgeHeight" type="Number" />
				<f:param name="hor" type="String" />
				<f:param name="arrowOffset" type="Number" />


				<!-- Put the badge popup here -->
				<f:template name="badgePopup">
					<f:thunk url="../main/badge.xml">
						<f:with-param name="focus" select="$focus" />
						<f:with-param name="newPane" select="$openObject" />
						<f:with-param name="direction" select="$hor" />
						<f:with-param name="arrowOffset" select="$arrowOffset" />
					</f:thunk>
				</f:template>

				<f:perform with-action="$showPopup">
					<f:with-param name="display"><display x="{$badgeX/@value}" y="{$badgeY/@value}" width="{$badgeWidth/@value}" height="{$badgeHeight/@value}" class="badge"/></f:with-param>
					<f:with-param name="content" select="$badgePopup" />
				</f:perform>
				
			</f:action>
		</f:action>
		
		<f:action name="newPane">
			<f:param name="focus" type="Object" />
			<f:derive name="lastPaneKey" d="takeLastKey (UI.pane.set:panes paneset)" />
			
			<xsl:variable name="newKey">			
				<f:each select="$lastPaneKey">
					<xsl:call-template name="ord-bigger">
						<xsl:with-param name="s" select="./@value" />
					</xsl:call-template>
				</f:each>
			</xsl:variable>

			<f:create type="UI.pane.pane" name="newPane" />
			<f:intact object="$newPane" action="add" property="focus" key="$focus" />

			<f:intact object="$paneset" action="add" property="panes" value="$newPane">
				<f:with-param name="key" select="$newKey" as="String" />
			</f:intact>
		</f:action>
	</f:template>

	<f:include url="/xml/util/style.xml" />	
	<f:include url="/xml/util/ord.xml" />
	<f:include url="/xml/util/uiActions.xml" />
	
	<f:include url="/xml/debug/prettyPrint.xml" />
</f:template>