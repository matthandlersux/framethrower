
==Fundamental Built-in Functions==

[For more, see ../generated/builtin/tooltips.txt]

=State=
set			:: Unit a -> a -> Action Void
unset		:: Unit a -> Action Void
add			:: Set a -> a -> Action Void
remove		:: Set a -> a -> Action Void
addEntry	:: Map k v -> k -> v -> Action Void
removeEntry	:: Map k v -> k -> Action Void

=Lists=
nil		:: [a]
cons	:: a -> [a] -> [a]
append	:: [a] -> [a] -> [a]
head	:: [a] -> a
tail	:: [a] -> [a]
[Note that the value '[x1, ..., xN]' desugars to '(cons x1 (cons x2 (...(cons xN nil)...)))',
and the type '[a]' desugars to 'List a'.]

=Tuples=
makeTupleN	:: t1 -> ... -> tN -> (t1, ..., tN)
tupleNgetI	:: (t1, ..., tN) -> tI
fst			:: (a, b) -> a
snd			:: (a, b) -> b
[Note that the value '(x1, ..., xN)' desugars to 'makeTupleN x1 ... xN',
and the type '(t1, ..., tN)' desugars to 'TupleN t1 ... tN'.]

=The Action "Monad"=
return		:: a -> Action a
	Given a value, returns an 'Action' whose result will always be that value.
	This is useful since the last line of an action must be an 'Action',
	so 'return' gives a way to use a non-'Action' for the result of an action.

=The Unit "Monad"=
returnUnit	:: a -> Unit a
bindUnit	:: (a -> Unit b) -> Unit a -> Unit b
mapUnitN	:: (t1 -> ... -> tN) -> Unit t1 -> ... -> Unit tN

=Fetching=
fetch		:: Unit a -> a
	returns the "value" of a Unit.
	However, a fixed Unit has no fixed value,
	and thus 'fetch' cannot really be a function.
	In fact it is special syntax which virally makes
	every related expression "fetched" as well,
	and then desugars everything into the Unit "monad",
	as 'mapUnitN' expressions and <f:each> statements.
	For example, consider a template which keeps track of a radius
	and uses some other 'drawArea::Number->XMLP' template to draw the corresponding area:
	template() {
		radiusS = state(Unit Number),
		diameter = product 2 (fetch radiusS),
		drawArea (product 3.14159 diameter)
	}
	then it type-checks as expected based on the signature of 'fetch', but actually desugars to:
	template() {
		radiusS = state(Unit Number),
		<f:each mapUnit1 ( _fetched0 -> drawArea (product 3.14159 (product 2 _fetched0)) ) radiusS as _fetch>
			_fetch
		</f:each>
	}
	Thus we are able to deal with the "value" of a reactive quantity as though it is constant,
	and the required reactive code is automatically written for us.
unfetch		:: a -> Unit a
	unfetch takes a "fetched" expression and turns it back into a "normal" expression.
	This is possible since the code using an unfetched expression expects a Unit, which is
	what the fetched expression "really" was all along.
	For example, consider the same template as above, but now 'drawArea::Unit Number->XMLP'
	expects a Unit. It is still much easier to do the math on fetched expressions, so we would write:
	template() {
		radiusS = state(Unit Number),
		diameter = product 2 (fetch radiusS),
		drawArea (unfetch (product 3.14159 diameter))
	}
	which desugars to:
	template() {
		radiusS = state(Unit Number),
		drawArea (mapUnit1 ( _fetched0 -> product 3.14159 (product 2 _fetched0) ) radiusS)
	}
	[Note that 'unfetch' will also work fine on expressions that aren't actually fetched;
	in that case it desugars to 'mapUnit0' which is equivalent to 'returnUnit'.]
x <~ y		=> x <- return (y)
	'return', mentioned earlier, has an interesting use for fetched values within an action.
	Specifically, since using a fetched value during the execution of an action forces its
	current value to be extracted, you can get the current value by performing the trivial
	'return' Action on the fetched value.
	The '<~' syntax is sugar for this operation.
	For example, consider the template:
	template() {
		xS = state(Unit Number),
		x = fetch xS,
		yS = state(Unit Number),
		...
		<f:on mousedown>
			midX = quotient (sum x event.mouseX) 2,
			set xS midX, // line A
			set yS midX // line B
		</f:on>
		...
	}
	Presumably the programmer was thinking of midX as a fixed value, since that is what it appears to be.
	Since it's fetched, however, it's actually reactive, so changing 'xS' in line A means that in line B
	midX will have a different value (since midX depends on xS). Sometimes this sort of reactivity is what you
	want, even within an action, but in this instance it is probably better to "fix" the value of midX:
		...
		<f:on mousedown>
			midX <~ quotient (sum x event.mouseX) 2, // equivalent to 'midX <- return (quotient (sum x event.mouseX) 2)'
			set xS midX, // line A
			set yS midX // line B
		</f:on>
		...
	Now midX is guaranteed to be a fixed value, since it is the result of an 'Action' that was executed at
	a particular time. Thus its value in lines A and B will be the same.
