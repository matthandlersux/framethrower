Here is a quick, informal first draft of the template syntax.

A template (.tpl file) contains a LINE.
A let (.let file) contains a comma separated list of LETLINES.


TEMPLATE
	template(PARAMS)::TYPE { //TYPE is optional
		LETLINES
	}


PARAMS
	comma separated list of PARAM

PARAM
	VARTOCREATE | VARTOCREATE::TYPE


LETLINES
	comma separated list of LETLINEs ending with a LINE (the output)

LETLINE
	VARTOCREATE = LINE

LINE
	TEMPLATE | EXPR | BLOCK | JAVASCRIPT | CASE | XML | STATE | ACTIONTPL

CASE
	if EXPR as VARTOCREATE {
		LETLINES
	} else if EXPR as VARTOCREATE {
		LETLINES
	} ...
	} else {
		LETLINES
	}

EXPR
	EXPRCODE
	| EXPRCODE :: TYPE
	EXPRCODE is an expression. you know what an expression looks like (words with spaces, :, ~, double colon :: not allowed)

BLOCK
	{
		LETLINES
	}

JAVASCRIPT
	function (PARAMS)::TYPE {
		JSCODE
	}

JSCODE
	not sure the best way to know when the JSCODE ends.. maybe by counting close-braces?

XML
	this starts with a open-angle-bracket, and ends when the XML ends (ie: matching closing tag) (not quite right: see note about syntactic sugar below)
	there are a few special elements:
		anywhere (in an attribute or in a text node) there can be {EXPR} (the stuff inside the braces should be highlighted like an EXPR)
		
		<f:call>LETLINES</f:call>
		<f:each EXPR as VARTOCREATE>LETLINES</f:each>
		<f:each EXPR as VARTOCREATE, VARTOCREATE>LETLINES</f:each> // for key, value when iterating through Map's
		<f:on EVENT>ACTSTMTS</f:on>
	
	there is syntactic sugar for having multiple XML elements top-level. If XML is on its own (ie: not part of a LETLINE), then after the XML ends, there can be more text that gets interpreted as XML. The XML thus ends only when there is the ending. This ending can be </f:call>, </f:each>, or } depending on context. Note that each should only end it if it is at the top-level in terms of XML nesting. Also, the } should only end it if it is unbalanced (ie: no preceding { which would imply a {EXPR}).
	
EVENT
	for now treat this as a string. We'll eventually have a list of acceptable events (click, mouseover, etc). We may add parameterized events too (keydown (G key) with shift held, for example).
		


STATE
	state{ACTSTMTS}
	| state(TYPE)
	ex: state(Unit Object)


VARTOCREATE
	string with no spaces (these are where variables in scope get created)

TYPE
	you know what types look like (words with spaces, end it on comma or close-brace)

ACTIONTPL
	action(PARAMS)::TYPE{ //Type is optional
		ACTSTMTS
	}

ACTSTMTS
	comma separated list of ACTSTMTs

ACTSTMT
	VARTOCREATE = ACTION | VARTOCREATE <- ACTION |
	extract EXPR as VARTOCREATE {
		ACTSTMTS
	}

ACTION
	CREATE | EXTRACT | LINE

CREATE
	create(TYPE, PROPERTIES) |
	create(TYPE)

PROPERTIES
	this is a representation of properties of a created object (based on JSON notation). It looks like:
	{STRING: EXPR}

EXTRACT
	(extract works like f:each within an action.)
	extract EXPR as VARTOCREATE {ACTSTMTS}
	| extract EXPR as VARTOCREATE, VARTOCREATE {ACTSTMTS} // for key, value when extracting from Maps
	| VARTOCREATE <- extract EXPR, ACTSTMTS	//"sugar" syntax, can only be used for extracting from a Unit


Basically the idea is that templates have a bunch of lets: VARTOCREATE = LINE, with the very last one being just a LINE. Action "templates" are the same thing but can also have CREATE and EXTRACT in addition to the normal things in LINE. Also, actions don't need to have the "VARTOCREATE = " at every line other than the last.

So you have some idea of the semantics: in templates, the first bunch of lines are the let statements. They can be in any order and have mutual recursion. The last line is the output of the template, it can use the various things created with the let statements.

An action template can be thought of as a function that returns an Action, which is a list of instructions to be run. In action templates, the order of the lines matter and all the lines affect the result, not just the last. When the action is run, the lines are "executed" in that order. Some actions (CREATE and actions templates that end in CREATE) have return values. When you see a VARTOCREATE = ACTION, it can be used in two ways. In one way, if the ACTION is a CREATE or an expression that evaluates to an Action, then that Action gets run and the return value gets put into VARTOCREATE. The other way is if ACTION is just a LINE (that doesn't return an Action), then this just serves as a let statement like in a template.
